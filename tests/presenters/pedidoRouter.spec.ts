// Generated by CodiumAI
import { Server } from "mysql2/typings/mysql/lib/Server";
import API from "../../src/presenters/api/index";
import { pedidoRouter } from "../../src/presenters/api/routers";
import { PedidoController } from "../../src/interfaceAdapters/controllers/pedidoController";
import supertest from "supertest";
import express from "express";

describe('pedidoRouter.get("/iniciar-pedido") callback', () => {
  const createAt = new Date();
  // const server = new API();

  // const api = new API();
  // const app = api.appServer();

  const createServer = () => {
    const app = express()
    app.use(express.json())
    app.use("/api/pedido", pedidoRouter)
    return app
  }

  it('Deve criar um novo pedido com o status Rascunho', async () => {
    const responseExpected = {
      "id": "2313853d-6a29-494c-9e85-5e2d7ff433c4",
      "clienteId": "111",
      "valor": 0,
      "status": "Rascunho",
      "itens": [],
      "retiradoEm": null,
      "createdAt": "2024-01-25T15:46:55.256Z",
      "updatedAt": null,
      "deletedAt": null,
    }

    PedidoController.iniciaPedido = jest.fn().mockResolvedValue(responseExpected);

    await supertest(createServer())
      .get("/api/pedido/iniciar-pedido")
      .expect(201)
      .then((response) => {
        // Check the response type and length
        expect(response?.body?.message?.status).toBe(responseExpected.status);
        expect(response?.body?.message?.id).toBe(responseExpected.id);
      })
  });

  it('Deve impedir de finalizar o pedido em Rascunho sem itens ', async () => {
    const responseExpected = {
      "error": {
        "message": "Não é possível realizar um pedido sem nenhum valor"
      }
    }


    PedidoController.iniciaPedido = jest.fn().mockResolvedValue(responseExpected);

    await supertest(createServer())
      .post("/api/pedido/iniciar-pedido")
      .send()
      .expect(201)
      .then((response) => {
        // Check the response type and length
        expect(response?.body).toStrictEqual(responseExpected);
      })
  });

  // // Throws an error when the clienteId is not found.
  // it('should throw an error when the clienteId is not found', async () => {
  //   const req = {
  //     body: {},
  //     params: {},
  //     query: {},
  //   };

  //   const res = {
  //     status: jest.fn(),
  //     json: jest.fn(),
  //   };

  //   const next = jest.fn();

  //   const clienteId = '';

  //   await pedidoRouter.get("/iniciar-pedido")(req, res, next);

  //   expect(next).toHaveBeenCalledWith(new CustomError("ClienteId Nao encontrado!", "NOT_FOUND"));
  // });

  // // Throws an error when there is an error creating the pedido.
  // it('should throw an error when there is an error creating the pedido', async () => {
  //   const req = {
  //     body: {},
  //     params: {},
  //     query: {},
  //   };

  //   const res = {
  //     status: jest.fn(),
  //     json: jest.fn(),
  //   };

  //   const next = jest.fn();

  //   const clienteId = '111';

  //   dbPedidosRepository.iniciaPedido = jest.fn().mockRejectedValue(new Error('Error creating pedido'));

  //   await pedidoRouter.get("/iniciar-pedido")(req, res, next);

  //   expect(next).toHaveBeenCalledWith(new Error('Error creating pedido'));
  // });

  // // Throws an error when there is an error retrieving the clienteId.
  // it('should throw an error when there is an error retrieving the clienteId', async () => {
  //   const req = {
  //     body: {},
  //     params: {},
  //     query: {},
  //   };

  //   const res = {
  //     status: jest.fn(),
  //     json: jest.fn(),
  //   };

  //   const next = jest.fn();

  //   const clienteId = '111';

  //   dbPedidosRepository.iniciaPedido = jest.fn().mockResolvedValue(null);

  //   await pedidoRouter.get("/iniciar-pedido")(req, res, next);

  //   expect(next).toHaveBeenCalledWith(new CustomError("ClienteId Nao encontrado!", "NOT_FOUND"));
  // });

  // // Returns a 500 status code and an error message when there is an unexpected error.
  // it('should return a 500 status code and an error message when there is an unexpected error', async () => {
  //   const req = {
  //     body: {},
  //     params: {},
  //     query: {},
  //   };

  //   const res = {
  //     status: jest.fn().mockReturnThis(),
  //     json: jest.fn(),
  //   };

  //   const next = jest.fn();

  //   const clienteId = '111';

  //   dbPedidosRepository.iniciaPedido = jest.fn().mockRejectedValue(new Error('Unexpected error'));

  //   await pedidoRouter.get("/iniciar-pedido")(req, res, next);

  //   expect(res.status).toHaveBeenCalledWith(500);
  //   expect(res.json).toHaveBeenCalledWith({
  //     status: "error",
  //     message: "Unexpected error",
  //   });
  // });
});
